filename/path: triggers/AccountTrigger.trigger

trigger AccountTrigger on Account (before insert, after insert) {
    if (Trigger.isBefore && Trigger.isInsert) {
        AccountTriggerHandler.beforeInsert(Trigger.new);
    }
    if (Trigger.isAfter && Trigger.isInsert) {
        AccountTriggerHandler.afterInsert(Trigger.new);
    }    
} 

filename/path: triggers/OpportunityTrigger.trigger

trigger OpportunityTrigger on Opportunity (before update, after update, before delete) {
    if (Trigger.isBefore && Trigger.isUpdate) {
        OpportunityTriggerHandler.beforeUpdate(Trigger.new);
    }
    if (Trigger.isBefore && Trigger.isDelete) {
        OpportunityTriggerHandler.beforeDelete(Trigger.old);
    }
}

Trigger Handlers
//==============================================
path/filename: classes/AccountTriggerHandler.cls

public class AccountTriggerHandler {
    public static void beforeInsert(List<Account> newAccounts) {
        for (Account acc : newAccounts) {
            if (acc.Type == null) {
                acc.Type = 'Prospect';
         }
      }
    }
    public static void beforeUpdate(List<Account> newAccounts) {
        for (Account acc : newAccounts) {
            if (acc.ShippingStreet != null || acc.ShippingCity != null || acc.ShippingState != null || acc.ShippingPostalCode != null || acc.ShippingCountry != null) {
                acc.BillingStreet = acc.ShippingStreet;
                acc.BillingCity = acc.ShippingCity;
                acc.BillingState = acc.ShippingState;
                acc.BillingPostalCode = acc.ShippingPostalCode;
                acc.BillingCountry = acc.ShippingCountry;
            }
        }
    } 
    public static void afterInsert(List<Account> newAccounts) {
        List<Contact> contactsToInsert = new List<Contact>();
        
        for (Account acc : newAccounts) {
            Contact newContact = new Contact(
                LastName = 'DefaultContact',
                Email = 'default@email.com',
                AccountId = acc.Id
            );
            contactsToInsert.add(newContact);
        }
        
        if (!contactsToInsert.isEmpty()) {
            insert contactsToInsert;
        }
    }
}
//==================================================================================
path/filename: classes/OpportunityTriggerHandler.clc

public class OpportunityTriggerHandler {
    public static void beforeUpdate(List<Opportunity> oppList) {
        for (Opportunity opp : oppList) {
            if (opp.Amount <= 5000) {
                opp.addError('Opportunity amount must be greater than 5000');
            }
        }
        Set<Id> accountIds = new Set<Id>();
        
        for (Opportunity opp : oppList) {
            if (opp.AccountId != null) {
                accountIds.add(opp.AccountId);
            }
        }
        
        if (!accountIds.isEmpty()) {
            Map<Id, Contact> accountToCeoContactMap = new Map<Id, Contact>();
            for (Contact ceoContact : [SELECT Id, AccountId FROM Contact WHERE Title = 'CEO' AND AccountId IN :accountIds]) {
                accountToCeoContactMap.put(ceoContact.AccountId, ceoContact);
            }
            
            for (Opportunity opp : oppList) {
                if (accountToCeoContactMap.containsKey(opp.AccountId)) {
                    opp.Primary_Contact__c = accountToCeoContactMap.get(opp.AccountId).Id;
                }
            }
        }
        
    }
    public static void beforeDelete(List<Opportunity> oppList) {
        Set<Id> accountIds = new Set<Id>();
        
        for (Opportunity opp : oppList) {
            accountIds.add(opp.AccountId);
        }
        
        Map<Id, Account> accountMap = new Map<Id, Account>([SELECT Id, Industry FROM Account WHERE Id IN :accountIds]);
        
        for (Opportunity opp : oppList) {
            Account acc = accountMap.get(opp.AccountId);
            if (opp.StageName == 'Closed Won' && acc.Industry == 'Banking') {
                opp.addError('Cannot delete closed opportunity for a banking account that is won');
            }
        }
    }
}
